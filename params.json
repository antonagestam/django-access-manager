{"name":"django-access-tools","tagline":"An abstract access manager for Django","body":"# Django Access Tools\r\n\r\n[![Build Status](https://travis-ci.org/antonagestam/django-access-tools.svg?branch=master)](https://travis-ci.org/antonagestam/django-access-tools)\r\n[![Coverage Status](https://coveralls.io/repos/antonagestam/django-access-tools/badge.svg?branch=coverage&service=github)](https://coveralls.io/github/antonagestam/django-access-tools?branch=coverage)\r\n\r\nA tidy and extendable way of defining access requirements for views. Because mixins and decorators gets messy.\r\n\r\n## Installation\r\n\r\nInstall using pip:\r\n\r\n```\r\npip install django-access-tools\r\n```\r\n\r\nOr latest version in repo:\r\n\r\n```\r\npip install -e git+https://github.com/antonagestam/django-access-tools/#egg=access\r\n```\r\n\r\n## Usage\r\n\r\n### Requirements\r\n\r\nAccess requirements are specified by extending the `Requirement` class.\r\nThe `is_fulfilled` method is what defines your logic of when the requirement\r\nis fulfilled. By overriding `not_fulfilled` you specify what should happen\r\nif the requirement is not fulfilled. For example this simple `LoggedIn`\r\nrequirement:\r\n\r\n```python\r\nfrom django.http import Http404\r\nfrom access.requirements import Requirement\r\n\r\n\r\nclass LoggedIn(Requirement):\r\n    def is_fulfilled(self):\r\n        return self.request.user.is_authenticated()\r\n    \r\n    def not_fulfilled(self):\r\n        return Http404()\r\n```\r\n\r\n__`Requirement.request`:__ Request object. Gets set by `Requirement.setup`.\r\n\r\n__`Requirement.args`:__ Request arguments passed to the view. Gets set by `Requirement.setup`.\r\n\r\n__`Requirement.kwargs`:__ Request keyword arguments passed to the view. Gets set by `Requirement.setup`.\r\n\r\n\r\n### Views\r\n\r\nAccess requirements for a view will be evaluated in the order they're specified.\r\nFor example `access_requirements = [LoggedIn, Active]` will have this chain of\r\nevents before the view is executed:\r\n\r\n- Check if `LoggedIn.is_fulfilled()` is `True`.\r\n- If not, make the view return `LoggedIn.not_fulfilled()` and stop.\r\n- Otherwise, check if `Active.is_fulfilled()` is `True`\r\n- If not, make the view return `Active.not_fulfilled()` and stop.\r\n- Otherwise continue to execute the view as normal.\r\n\r\n#### Class-based Views\r\n\r\nExtend your views with `ManagedAccessViewMixin` and specify `access_requirements`:\r\n\r\n```python\r\nfrom django.views.generic import TemplateView\r\nfrom access.views import ManagedAccessViewMixin\r\nfrom access.requirements import Active, LoggedIn\r\n\r\n\r\nclass MyView(ManagedAccessViewMixin, TemplateView):\r\n    access_requirements = [LoggedIn, Active]\r\n    template = 'index.html'\r\n```\r\n\r\n#### Functional Views\r\n\r\nFor functional views, use `Requirement.as_decorator`.\r\n\r\n```python\r\nfrom access.requirements import LoggedIn\r\n\r\n@LoggedIn.decorator\r\ndef my_view(request):\r\n    return \"Hello world\"\r\n```\r\n\r\nWhen combining many requirements for a functional view, it's recommended to use\r\n`access_requirements`. It returns a decorator and takes requirements as\r\npositional arguments.\r\n\r\n```python\r\nfrom access.decorators import access_requirements\r\nfrom access.requirements import Active, LoggedIn\r\n\r\n@access_requirements(LoggedIn, Active)\r\ndef my_view(request):\r\n    return \"Hello world\"\r\n```\r\n\r\n### Built-in Requirements\r\n\r\n__`PageNotFoundRequirement(Requirement)`:__ Raises `Http404()` if unfulfilled.\r\n\r\n__`Staff(PageNotFoundRequirement)`:__ Raises `Http404()` if user is not staff.\r\n\r\n__`SuperUser(PageNotFoundRequirement)`:__ Raises `Http404()` if user is not superuser.\r\n\r\n__`Active(PageNotFoundRequirement)`:__ Raises `Http404()` if user is not active.\r\n\r\n__`RedirectRequirement(Requirement)`:__ Returns `Http307(self.get_url())` if not fulfilled.\r\nSpecify `url_name` or override `get_url` to set URL to redirect to. Appends the current URL\r\nas ?next=current_url by default, set `append_next = False` to prevent this.\r\n\r\n__`LoggedIn(RedirectRequirement)`:__ Returns `Http307('login')` if user is not authenticated.\r\n\r\n\r\n### More Advanced Usage Example\r\n\r\nLet's say you have a view where the user should only be allowed access\r\nif they've accepted your terms of service and confirmed their email\r\naddress.\r\n\r\nThis example redirects the user to different views depending on if\r\nthey've accepted the terms of service and confirmed their email.\r\n`RedirectRequirement` appends `?next={url}` to the redirect URLs\r\nso that those views can redirect the user back after completing the\r\nsteps.\r\n\r\n```python\r\nfrom access.requirements import RedirectRequirement\r\n\r\n\r\nclass ProfileFieldRequirement(RedirectRequirement):\r\n    profile_field_name = None\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        self.required_field_value = kwargs.pop('required_field_value', True)\r\n        super(ProfileFieldRequirement, self).__init__(*args, **kwargs)\r\n\r\n    def is_fulfilled(self):\r\n        if self.profile_field_name is None:\r\n            raise ImproperlyConfigured(\r\n                \"ProfileFieldRequirements need to specify \"\r\n                \"`profile_field_name`.\")\r\n        value = getattr(self.request.user.profile, self.profile_field_name)\r\n        return value == self.required_field_value\r\n\r\n\r\nclass AcceptedTerms(ProfileFieldRequirement):\r\n    url_name = 'accept_tos'\r\n    profile_field_name = 'accepted_terms'\r\n\r\n\r\nclass ConfirmedEmail(ProfileFieldRequirement):\r\n    url_name = 'prompt_email'\r\n    profile_field_name = 'confirmed_email'\r\n\r\n# … in your views.py:\r\n\r\nfrom access.views import ManagedAccessViewMixin\r\n\r\n\r\nclass MyView(ManagedAccessViewMixin, View):\r\n    access_requirements = [AcceptedTerms, ConfirmedEmail]\r\n    \r\n    # … view code\r\n \r\n```\r\n\r\n\r\n## Run tests\r\n\r\nInstall test requirements:\r\n\r\n```\r\n$ pip install -r test-requirements.txt\r\n```\r\n\r\nRun tests:\r\n\r\n```\r\n$ make test\r\n```\r\n\r\n## License\r\n\r\ndjango-access-tools is licensed under The MIT License (MIT).\r\nSee [LICENSE file](./LICENSE) for more information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}